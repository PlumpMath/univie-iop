VU Interoperabilität Übung 4
Rainer Hörbe, a7901955 Gruppe 13
Arbeitsprotokoll


== Analyse der Aufgabe ==
=== Frage: Was produzieren Sie (siehe Wiki)?
* Annahme: Es ist die Zuweisung am cewebs unter "Teile" gemeint.
* Antwort: Lautsprecher 

=== Frage: Aus welchen Einzelteilen besteht der Teil (mindestens 7 Teile)? (1 JSON File das das Lager beschreibt, inklusive Anzahl der verfuegbaren Teile)
* Annahme: In der Struktur können mehrere Teile enthalten sein, es wird aber nur ein einzelner Teil gezeigt
* Antwort: output/lagerverwaltung.json

=== Wie sieht eine Bestellung eines Endproduktes aus (mindestens 4 Parameter)? (1 JSON File das die Bestellung beschreibt).
* Annahme: Es handelt sich um eine interne Lagerbestellung, keine Kundenbestellung. -> keine Kundenreferenz.

=== 7 Fortschrittsberichte waehrend das Endprodukt produziert wird. (1 JSON File pro Fortschritt das den Fortschritt beschreibt).
* uneindeutig: das kann heißen, dass (1) die Fortschrittsberichte für das gesamte Endprodukt erstellt und persistiert werden, und man dann die Historie abfragen kann, oder
  (2) es wird pro Teil ein aktueller Fortschrittsbericht erstellt.
* Annahmen: Variante (1), und außerdem, dass der Fortschritt in der Veränderung des Backlogs im Berichtszeitraum besteht.



=== Schreiben sie 3 REST Services:
* Einzelne Teile ins Lager LEGEN (PUT), und das Lager abfragen (GET).

./lager_abfragen.sh 
./lager_abfragen.sh Lautsprecher
./lager_abfragen.sh Lautsprecher 4711
./lager_updaten.sh Lautsprecher 4733 neuer_teil 5

PUT in apache freigeben
URL-Parameter über ENV?
HTTP custom error message

* Eine Bestellung abfragen (randomized parameters) (GET).
** unklar was mit randomisierten Parametern bezweckt wird.
** Annahme: Treffer und Nicht-Treffer werden abgefragt, aber mit gezielten Testwerten. 


* Fortschrittsbericht abfragen (welchen Bericht als integer parameter).

=== Abzugeben: 1ZIP, die JSON Files, den Sourcecode der REST Services.

===  Registrieren der Services unter der URL im Wiki.

== sonstiges ==
git push auf github.com war nicht möglich, weil Uebung4/resulz/query2.result zu groß war. Korrektur:
Untersuchung der history:
git log --graph --decorate --pretty=oneline --abbrev-commit --name-status
Löschen des betroffenen Files in allen Commits:
git filter-branch --prune-empty --index-filter "git rm --cached -f --ignore-unmatch Uebung4/resulz/query2.result" --tag-name-filter cat -- --all
