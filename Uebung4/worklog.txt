VU Interoperabilität Übung 4
Rainer Hörbe, a7901955 Gruppe 13
Arbeitsprotokoll


== Vorarbeit, um später bessere Abfragen zu ermöglichen ==
Update im eingenen XML-Clean input: appointment/@start, /@end auf xsd:datetime geändert
course/@ects auf xsd:decimal korrigiert
Im File base3.xml sind die Datums- und Zeitformate nicht xsd-konform. 
Mit den Regexp in base3_regexp.txt wurden sie für die Weekday-Funktion umformatiiert

== Aufgabe Teil 1 ==
- Erzeugen sie ein TURTLE file, das eine Ontologie analog zu den Schemas der XML Files enthaelt
Ergebnis: baseN_ontology.ttl  (N 1..3) build-Scripts in den unterverzeichnissen

- Welche Konzepte (Tags/Elemente) sind in Files?
- Welche Beziehungen haben Sie zueinander (z.b. 1 LV hat mehrere Gruppen)?
- Zusaetzlich: alle Konzepte auf Deutsch und ihre Verknuepfung mit den Englischen Konzepten.
Ergebnis: Siehe base1_build/base1_schema.ttl


=== Teil 2 SPARQL-Abfrage 1 ===
Die Fragestellung nach alternativen Bezeichnungen ist bei den vorliegenden Daten nicht sinnvoll, 
da Termine keine Bezeichnungen haben, sondern nur die hierarchisch übergeordneten Elemente LV, Modul, etc.
Die Frage aus welchen Begriffen ein Termin besteht wird mit einer Schemaabfrage gelöst.

=== Teil 2 SPARQL-Abfrage 2 ===
Mit der gesamten Datenmenge wird die Abfrage zum Langläufer. Wenn man die Ausgabe auf einen pager 
umleitet (| more), bekommt man die Ausgabe. Ein Test mit einer kleinere Datenmenge hat funktioniert.

=== Teil 2 SPARQL-Abfrage 3 ===
Im Prinzip einfach, nur fehlt in SPARQLdie Unterstützung für day-in-week(). Es gibt zwar Workarounds
die Wochentagsfunktion in SPARQL-Syntax zu oimplementieren, aber so einen Hack sollte man dem 
Abfrager nicht zumuten. 
Habe daher Day-of-week mit xslt in die ttl-Datei als statement eingefügt (Verwendung von exslt).

Abfrage läuft nur mit stark reduzierter Datenmenge.

=== Teil 2 SPARQL-Abfrage 4 ===
Laufzeit der Abfrage für base1: 0m46
Laufzeit der Abfrage für base1+base2: 1m34
Laufzeit der Abfrage für base1+base2+base3: 2m31

Ergebnis für bae1/Montag: leer (Montags wird keine Geschichte gelesen) Laufzeit 68s, durch Umreihung der Statements 
im WHERE nicht beeinflussbar.
Ergebnis für Donnerstag: nicht leer. Mit roqet arq ist schneller, liefert aber kein Ergebnis :-(.

== Lessons learned ==
Für Abfragen teilweise roqet und Apache Jena/arq eingesetzt 
Jena hat genauere Fehlermeldungen, liefert aber nicht immer korrekte Resultate
roqet kann anscheinend keine RDFS-Interferenzen - ist aber für die Aufgabe egal.
